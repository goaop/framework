<?php

namespace Go\Aop\Framework;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-20 at 11:58:54.
 */
class ClosureStaticMethodInvocationTest extends \PHPUnit_Framework_TestCase
{

    const FIRST_CLASS_NAME = 'Go\Tests\First';

    /**
     * {@inheritdoc}
     */
    public static function setUpBeforeClass()
    {
        include_once __DIR__ . '/../../Tests/First.php';
    }

    /**
     * {@inheritdoc}
     */
    protected function setUp()
    {
        if (version_compare(PHP_VERSION, '5.4.0') < 0) {
            $this->markTestSkipped("Closure Method Invocation works only on PHP 5.4 and greater");
        }
    }

    /**
     * Tests static method invocations with self
     *
     * @dataProvider staticSelfMethodsBatch
     */
    public function testStaticSelfMethodInvocation($methodName, $expectedResult)
    {
        $childClass = $this->getMockClass(self::FIRST_CLASS_NAME, array('none'));
        $invocation = new ClosureStaticMethodInvocation($childClass, $methodName, array());

        $result = $invocation($childClass);
        $this->assertEquals($expectedResult, $result);
    }

    /**
     * Tests static method invocations with self not overridden with parent
     *
     * @dataProvider staticSelfMethodsBatch
     */
    public function testStaticSelfNotOverridden($methodName, $expectedResult)
    {
        $childClass = $this->getMockClass(self::FIRST_CLASS_NAME, array($methodName));
        $invocation = new ClosureStaticMethodInvocation(self::FIRST_CLASS_NAME, $methodName, array());

        $result = $invocation($childClass);
        $this->assertEquals($expectedResult, $result);
    }

    /**
     * Tests static method invocations with Late Static Binding
     *
     * @dataProvider staticLsbMethodsBatch
     */
    public function testStaticLsbIsWorking($methodName)
    {
        $childClass = $this->getMockClass(self::FIRST_CLASS_NAME, array($methodName));
        $invocation = new ClosureStaticMethodInvocation(self::FIRST_CLASS_NAME, $methodName, array());

        $result = $invocation($childClass);
        $this->assertEquals($childClass, $result);
    }

    public function testValueChangedByReference()
    {
        $child      = $this->getMock(self::FIRST_CLASS_NAME, array('none'));
        $invocation = new ClosureStaticMethodInvocation(self::FIRST_CLASS_NAME, 'staticPassByReference', array());

        $value  = 'test';
        $result = $invocation($child, array(&$value));
        $this->assertEquals(null, $result);
        $this->assertEquals(null, $value);
    }

    public function testRecursionWorks()
    {
        $child      = $this->getMock(self::FIRST_CLASS_NAME, array('staticLsbRecursion'));
        $invocation = new ClosureStaticMethodInvocation(self::FIRST_CLASS_NAME, 'staticLsbRecursion', array());

        $child->staticExpects($this->exactly(5))->method('staticLsbRecursion')->will($this->returnCallback(
            function ($value, $level) use ($child, $invocation) {
                return $invocation($child, array($value, $level));
            }
        ));

        $childClass = get_class($child);
        $this->assertEquals(5, $childClass::staticLsbRecursion(5,0));
        $this->assertEquals(20, $childClass::staticLsbRecursion(5,3));
    }

    public function testAdviceIsCalledForInvocation()
    {
        $child  = $this->getMock(self::FIRST_CLASS_NAME, array('none'));
        $value  = 'test';
        $advice = new MethodBeforeInterceptor(function () use (&$value) {
            $value = 'ok';
        });

        $invocation = new ClosureStaticMethodInvocation(self::FIRST_CLASS_NAME, 'staticSelfPublic', array($advice));

        $result = $invocation($child, array());
        $this->assertEquals('ok', $value);
        $this->assertEquals(T_PUBLIC, $result);
    }

    public function testInvocationWithDynamicArguments()
    {
        $child      = $this->getMock(self::FIRST_CLASS_NAME, array('none'));
        $invocation = new ClosureStaticMethodInvocation(self::FIRST_CLASS_NAME, 'staticVariableArgsTest', array());

        $args     = array();
        $expected = '';
        for ($i=0; $i<10; $i++) {
            $args[]   = $i;
            $expected .= $i;
            $result   = $invocation($child, $args);
            $this->assertEquals($expected, $result);
        }
    }

    public function staticSelfMethodsBatch()
    {
        return array(
            array('staticSelfPublic', T_PUBLIC),
            array('staticSelfProtected', T_PROTECTED),
            array('staticSelfPublicAccessPrivate', T_PRIVATE),
        );
    }

    public function staticLsbMethodsBatch()
    {
        return array(
            array('staticLsbPublic'),
            array('staticLsbProtected'),
        );
    }

}
