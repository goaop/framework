<?php
declare(strict_types = 1);

namespace Go\Aop\Framework;

use Go\Stubs\First;
use Go\Stubs\FirstStatic;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-20 at 11:58:54.
 */
class StaticClosureMethodInvocationTest extends \PHPUnit\Framework\TestCase
{

    /**
     * Tests static method invocations with self
     *
     * @dataProvider staticSelfMethodsBatch
     */
    public function testStaticSelfMethodInvocation($methodName, $expectedResult)
    {
        $childClass = $this->createMock(First::class);
        $invocation = new StaticClosureMethodInvocation(get_class($childClass), $methodName, []);

        $result = $invocation($childClass);
        $this->assertEquals($expectedResult, $result);
    }

    /**
     * Tests static method invocations with self not overridden with parent
     *
     * @dataProvider staticSelfMethodsBatch
     */
    public function testStaticSelfNotOverridden($methodName, $expectedResult)
    {
        $childClass = $this->createMock(First::class);
        $invocation = new StaticClosureMethodInvocation(First::class, $methodName, []);

        $result = $invocation($childClass);
        $this->assertEquals($expectedResult, $result);
    }

    /**
     * Tests static method invocations with Late Static Binding
     *
     * @dataProvider staticLsbMethodsBatch
     */
    public function testStaticLsbIsWorking($methodName)
    {
        $childClass = $this->createMock(First::class);
        $invocation = new StaticClosureMethodInvocation(First::class, $methodName, []);

        $result = $invocation(get_class($childClass));
        $this->assertEquals(get_class($childClass), $result);
    }

    public function testValueChangedByReference()
    {
        $child      = $this->createMock(First::class);
        $invocation = new StaticClosureMethodInvocation(First::class, 'staticPassByReference', []);

        $value  = 'test';
        $result = $invocation($child, [&$value]);
        $this->assertEquals(null, $result);
        $this->assertEquals(null, $value);
    }

    public function testRecursionWorks()
    {
        $invocation = new StaticClosureMethodInvocation(First::class, 'staticLsbRecursion', []);
        $child      = new FirstStatic($invocation);

        $childClass = get_class($child);
        $this->assertEquals(5, $childClass::staticLsbRecursion(5,0));
        $this->assertEquals(20, $childClass::staticLsbRecursion(5,3));
    }

    public function testAdviceIsCalledForInvocation()
    {
        $child  = $this->createMock(First::class);
        $value  = 'test';
        $advice = new BeforeInterceptor(function () use (&$value) {
            $value = 'ok';
        });

        $invocation = new StaticClosureMethodInvocation(First::class, 'staticSelfPublic', [$advice]);

        $result = $invocation($child, []);
        $this->assertEquals('ok', $value);
        $this->assertEquals(T_PUBLIC, $result);
    }

    public function testInvocationWithDynamicArguments()
    {
        $child      = $this->createMock(First::class);
        $invocation = new StaticClosureMethodInvocation(First::class, 'staticVariableArgsTest', []);

        $args     = [];
        $expected = '';
        for ($i=0; $i<10; $i++) {
            $args[]   = $i;
            $expected .= $i;
            $result   = $invocation($child, $args);
            $this->assertEquals($expected, $result);
        }
    }

    public function testInvocationWithVariadicArguments()
    {
        $child      = $this->createMock(First::class);
        $invocation = new StaticClosureMethodInvocation(First::class, 'staticVariadicArgsTest', []);

        $args     = [];
        $expected = '';
        for ($i=0; $i<10; $i++) {
            $args[]   = $i;
            $expected .= $i;
            $result   = $invocation($child, $args);
            $this->assertEquals($expected, $result);
        }
    }

    public function staticSelfMethodsBatch()
    {
        return [
            ['staticSelfPublic', T_PUBLIC],
            ['staticSelfProtected', T_PROTECTED],
            ['staticSelfPublicAccessPrivate', T_PRIVATE],
        ];
    }

    public function staticLsbMethodsBatch()
    {
        return [
            ['staticLsbPublic'],
            ['staticLsbProtected'],
        ];
    }

}
